# Everythings hosted off of b4t.to

# Best Practices:
# restart:always - This will make sure the container restarts when docker daemon
# restarts or the container exits. Can still stop the container with manual
# action, doesn't require unless-stopped (that just refers to not restarting the
# container if stopped after a daemon restart)
# HEALTHCHECK - Try to make a container healthy/unhealthy based on only the smallest
# testable unit. You can't do this at the domain level (eg, testing seafile.b4t.to)
# because traefik filters unhealthy containers and traefik will never allow it
# to get to the external if it never comes up as healthy

# TODO: Setup email where service supports it (like seafile)
# TODO: Setup all logging collection
# TODO: Healthchecks
# * Some containers don't have curl, wget, iwr, or nc and would require custom
# dockerfile to do...
# https://docs.docker.com/compose/compose-file/#healthcheck
# TODO: Implement service specfic backup recommendations
# https://download.seafile.com/published/seafile-manual/docker/deploy%20seafile%20with%20docker.md
# TODO: Find alpines for relevant services (or maybe not, there was an argument against it and
# the stripped down ubuntu being small enough)
# TODO: Remove 192.168.0.0 lan-only IP or make it dynamic or something, or an env variable?

# Please pass in the following variables
# $EMAIL - Email for Traefik

# $ICECAST_PASSWORD - Just sonething strong and random, used by the icecast admin panel and stream connection
# $SPOTIFY_USERNAME
# $SPOTIFY_CLIENT_ID
# $SPOTIFY_CLIENT_SECRET
# $SOUNDCLOUD_TOKEN
# $YOUTUBE_KEY

# $SEAFILE_MYSQL_PASSWORD - Just something strong and random

# $TRAEFIK_HTPASSWD - The Traefik Dashboard Basic Auth Htpasswd

# $GRAFANA_ADMIN_PASSWORD - The admin password for grafana

# $CLOUDFLARE_DDNS_B4T_TO_API_KEY - The API key for Cloudflare DDNS editting for b4t.to
#                                   Needs Zone:Zone:Read and Zone:DNS:Edit

# TODO: It'd be nice if these were used for all outgoing gmail
# $GMAIL_ACCOUNT_USERNAME - Sets prometheus alertmanager sender from gmail
# $GMAIL_ACCOUNT_PASSWORD - Sets prometheus alertmanager sender from gmail password

version: "3.6"
services:
  # Mopidy + Icecast - My music streaming replacement
  # NOTE: Still super WIP
  # TODO: Fix the latency between playing the song and hearing it on the stream
  # (there seems to be a icecast configuration I can change for this about
  # buffering)
  # TODO: Some of the integrations don't work ;-;
  # TODO: Setup logging and hook up log scanner
  mopidy:
    image: wernight/mopidy:latest
    container_name: mopidy
    restart: always
    volumes:
      - ~/Dropbox/Music/NotOnSpotify:/var/lib/mopidy/media:ro #Local media files
      - /opt/batto-cave/mopidy-data:/var/lib/mopidy/local     #Local configurations
    ports:
      - 6600:6600 #MPD server for ncmpcpp
    #  - 6680:6680 #HTTP server for web client
    command: >-
      mopidy
      -o "audio/output=lamemp3enc ! shout2send async=false mount=mopidy ip=icecast port=8000 password=$ICECAST_PASSWORD"
      -o "spotify/username=$SPOTIFY_USERNAME"
      -o "spotify/password=$SPOTIFY_PASSWORD"
      -o "spotify/client_id=$SPOTIFY_CLIENT_ID"
      -o "spotify/client_secret=$SPOTIFY_CLIENT_SECRET"
      -o "soundcloud/auth_token=$SOUNDCLOUD_TOKEN"
      -o "youtube/youtube_api_key=$YOUTUBE_KEY"
    networks:
      - traefik-proxy
      - mopidy-icecast
    depends_on:
      - icecast
    labels:
      - "traefik.enable=true"
      # Mopidy exposes multiple ports, we just need the dashboard
      - "traefik.http.services.mopidy.loadbalancer.server.port=6680"
      - "traefik.http.routers.mopidy.rule=Host(`mopidy.b4t.to`)"
      - "traefik.http.routers.mopidy.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.mopidy.middlewares=http-compress"
  icecast:
    build: 
      context: icecast/
    container_name: icecast
    restart: always
    # ports:
    #  - 8000:8000 #Default icecast
    environment:
      ICECAST_SOURCE_PASSWORD: "$ICECAST_PASSWORD"
      ICECAST_RELAY_PASSWORD: "$ICECAST_PASSWORD"
      ICECAST_ADMIN_PASSWORD: "$ICECAST_PASSWORD"
      ICECAST_ADMIN_USERNAME: admin
    networks:
      - traefik-proxy
      - mopidy-icecast
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.icecast.rule=Host(`icecast.b4t.to`)"
      - "traefik.http.routers.icecast.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.icecast.middlewares=lan-only,http-compress"

  # TODO:MAke a separate password
  statping-db:
    image: postgres:10
    container_name: statping-db
    restart: always
    networks:
      - statping-internal
    volumes:
      - /opt/batto-cave/statping-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: $SEAFILE_MYSQL_PASSWORD
      POSTGRES_USER: statping
      POSTGRES_DB: statping
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U statping"]
      interval: 10s
      timeout: 5s
      retries: 5

  statping:
    image: statping/statping
    container_name: statping
    restart: always
    volumes:
      - /opt/batto-cave/statping:/app
    depends_on:
      - statping-db
    environment:
      DB_CONN: postgres
      DB_HOST: statping-db
      DB_USER: statping
      DB_PASS: $SEAFILE_MYSQL_PASSWORD
      DB_DATABASE: statping
      NAME: "Batto Ping"
      DESCRIPTION: "Keep an eye on all that important shit"
    networks:
      - traefik-proxy
      - statping-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.statping.rule=Host(`statping.b4t.to`)"
      - "traefik.http.routers.statping.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.statping.middlewares=http-compress"

  # TODO: Look into RSS hub instead
  # Uses PHP, memcached and apache under the hood
  rss-bridge:
    image: rssbridge/rss-bridge:latest
    container_name: rss-bridge
    restart: always
    networks:
      - traefik-proxy
    volumes:
      - ./rss-bridge/whitelist.txt:/app/whitelist.txt
    # ports:
    #   - "3031:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.rss-bridge.loadbalancer.server.port=80"
      - "traefik.http.routers.rss-bridge.rule=Host(`rss-bridge.b4t.to`)"
      - "traefik.http.routers.rss-bridge.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.rss-bridge.middlewares=http-compress"

  # Fresh RSS
  freshrss-db:
    image: postgres
    restart: always
    container_name: freshrss-db
    networks:
      - freshrss-internal
    volumes:
      - /opt/batto-cave/freshrss-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: freshrss
      POSTGRES_PASSWORD: freshrss
      POSTGRES_DB: freshrss
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U freshrss"]
      interval: 10s
      timeout: 5s
      retries: 5

  freshrss:
    image: freshrss/freshrss
    restart: always
    networks:
      - freshrss-internal
      - traefik-proxy
    #ports:
    #  - "80:80"
    depends_on:
      - freshrss-db
    volumes:
      - /opt/batto-cave/freshrss-app/data:/var/www/FreshRSS/data
      - /opt/batto-cave/freshrss-app/extensions:/var/www/FreshRSS/extensions
    environment:
      - CRON_MIN=*/20
      - TZ=America/Detroit
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.freshrss.loadbalancer.server.port=80"
      - "traefik.http.routers.freshrss.rule=Host(`freshrss.b4t.to`)"
      - "traefik.http.routers.freshrss.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.freshrss.middlewares=http-compress"

  # Netdata monitoring
  # Wired up with docker-socket-proxy for container names
  # https://learn.netdata.cloud/docs/agent/packaging/docker#docker-container-names-resolution
  # TODO: Add collectors for supported services like
  # web logs (nginx), traefik, uWSGI, DBs (postgres, mariadb), icecast
  # dockerd (container health stats) 
  netdata:
    image: netdata/netdata
    restart: always
    hostname: nd.b4t.to
    container_name: netdata
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/host/etc/os-release:ro
    environment:
      DOCKER_HOST: docker-socket-proxy:2375
    networks:
      - traefik-proxy
      - docker-socket-proxy-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.netdata.loadbalancer.server.port=19999"
      - "traefik.http.routers.netdata.rule=Host(`nd.b4t.to`)"
      - "traefik.http.routers.netdata.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.netdata.middlewares=http-compress"

  prometheus-docker-exporter:
    build: 
      context: docker_exporter/docker_exporter/
    restart: always
    container_name: prometheus-docker-exporter
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-proxy

  # Prometheus
  prometheus:
    build:
      context: prometheus/
    restart: always
    container_name: prometheus
    networks:
      - traefik-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.b4t.to`)"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.prometheus.middlewares=lan-only,http-compress"
  # TODO: document
  # This can be managed inside the container with `amtool`
  # amtool --... http://localhost:9093 alert add asdf To add a test alert, to test
  # a router...
  alertmanager:
    build:
      context: prometheus/alertmanager/
      args:
        GMAIL_ACCOUNT_USERNAME: $GMAIL_ACCOUNT_USERNAME
        GMAIL_ACCOUNT_PASSWORD: $GMAIL_ACCOUNT_PASSWORD
    restart: always
    container_name: alertmanager
    networks:
      - traefik-proxy

  # shieldsio/shields
  shieldsio:
    image: shieldsio/shields:next
    restart: always
    container_name: shieldsio
    environment:
      METRICS_PROMETHEUS_ENABLED: 'true'
      METRICS_PROMETHEUS_ENDPOINT_ENABLED: 'true'
    networks:
      - traefik-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.shieldsio.loadbalancer.server.port=80"
      - "traefik.http.routers.shieldsio.rule=Host(`shields.b4t.to`)"
      - "traefik.http.routers.shieldsio.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.shieldsio.middlewares=http-compress"

  # Grafana
  # TODO: Had to manually chown -R 472 /opt/batto-cave/grafana directory
  # due to permissions errors
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - /opt/batto-cave/grafana:/var/lib/grafana
      - ./grafana-provisioning/:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=cobertos
      - GF_SECURITY_ADMIN_PASSWORD=$GRAFANA_ADMIN_PASSWORD
    networks:
      - traefik-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.rule=Host(`grafana.b4t.to`)"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflarednsresolver"
      - "traefik.http.routers.grafana.middlewares=lan-only,http-compress"

  # This will require some extra configuration in wg0.conf in the
  # wireguard config. We need to add the subnet for our local
  # network to the AllowedIPs, add a suffix to the Address of the peer
  # (otherwise some clients complain), but otherwise it should work
  # out of the box
  # https://www.stavros.io/posts/how-to-configure-wireguard/
  wireguard:
    image: linuxserver/wireguard
    restart: always
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      PUID: '1000'
      PGID: '1000'
      TZ: America/Detroit
      SERVERURL: 'b4t.to'
      SERVERPORT: '51820'
      PEERS: '1'
      #PEERDNS: auto #optional
      #INTERNAL_SUBNET=10.13.13.0 #optional
    volumes:
      - /opt/batto-cave/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1

  # Networking
  # TODO: Split this into multiple files or something... this is getting bad...
  # TODO: Specify the TLS ciphers explicitly?
  # https://github.com/Holi0317/homeserver-compose/blob/master/traefik/build/config/tls.toml
  # If you're ever having trouble with certificates, make sure you're using the staging
  # CA to debug. Also you can delete part or all of the acme.json file and then restart
  # traefik to get certificates to regenerate manually
  traefik:
    image: traefik:v2.2
    container_name: traefik
    restart: always
    command:
      # I could also use a traefik.yml and mount it to 
      #   - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      # but ehhhh, I'll do that if this really becomes unweildy

      - "--log.level=DEBUG"

      # Turn on dashboard, configured to use Basic Auth in this contains labels
      # https://docs.traefik.io/operations/dashboard/#secure-mode
      - "--api.dashboard=true" # Defaults to port 8080

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # This needs to be the FULL NETWORK NAME. If not, Traefil will sometimes work
      # and sometimes give a bad gateway for containers (randomly every run)
      # https://stackoverflow.com/a/46439598/2759427
      - "--providers.docker.network=batto-cave_traefik-proxy"

      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"

      - "--certificatesresolvers.cloudflarednsresolver.acme.email=cobertosrobertos@gmail.com"
      - "--certificatesresolvers.cloudflarednsresolver.acme.storage=/data/acme.json"
      - "--certificatesresolvers.cloudflarednsresolver.acme.caServer=https://acme-v02.api.letsencrypt.org/directory"
      # - "--certificatesresolvers.cloudflarednsresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.cloudflarednsresolver.acme.dnschallenge.provider=cloudflare"

      - "--metrics.prometheus=true"
    volumes:
      - "/opt/batto-cave/traefik:/data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "443:443"
    environment:
      CF_DNS_API_TOKEN: '${CLOUDFLARE_DDNS_B4T_TO_API_KEY}'
    networks:
      - traefik-proxy
    labels:
      - "traefik.enable=true"
      #== Middlewares ==
      # LAN IP only
      - "traefik.http.middlewares.lan-only.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.0.0/24, 192.168.1.0/24"
      # Gzip
      - "traefik.http.middlewares.http-compress.compress=true"
      # Basic auth
      - "traefik.http.middlewares.auth.basicauth.users=$TRAEFIK_HTPASSWD"
      # https redirect
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      # Security - TODO: More research on a couple of these, like stsSeconds
      # https://github.com/Holi0317/homeserver-compose/blob/master/traefik/build/config/middlewares.toml
      #- "traefik.http.middlewares.secure_head.headers.accessControlAllowOrigin=null"
      #- "traefik.http.middlewares.secure_head.headers.sslRedirect=true"
      #- "traefik.http.middlewares.secure_head.headers.contentTypeNosniff=true"
      #- "traefik.http.middlewares.secure_head.headers.browserXssFilter=true"
      #- "traefik.http.middlewares.secure_head.headers.contentSecurityPolicy=upgrade-insecure-requests"
      #- "traefik.http.middlewares.secure_head.headers.stsSeconds=31536000"
      #- "traefik.http.middlewares.secure_head.headers.framedeny=true"
      #- "traefik.http.middlewares.secure_head.headers.customResponseHeaders.Referrer-Policy=no-referrer"
      #- "traefik.http.middlewares.secure_head.headers.customResponseHeaders.X-Powered-By=null"
      
      # Global redirect all http to https
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{any:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.middlewares=https-redirect"

      # == Traefik Dashboard config (traefik-ception) ==
      - "traefik.http.routers.api.rule=Host(`traefik.b4t.to`) || Host(`traefik.localhost`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=lan-only,auth"

  cloudflare-ddns-b4t-to:
    image: oznu/cloudflare-ddns
    container_name: cloudflare-ddns-b4t-to
    restart: always
    environment:
      API_KEY: '${CLOUDFLARE_DDNS_B4T_TO_API_KEY}'
      ZONE: 'b4t.to'
    healthcheck:
      #Check that the DNS resolves to this boxes external IP address
      test: ["CMD-SHELL", "[ $$(dig +short b4t.to) = $$(dig +short myip.opendns.com @resolver1.opendns.com) ]"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Proxy for docker.sock
  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: docker-socket-proxy
    networks:
      - docker-socket-proxy-internal
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CONTAINERS=1
    healthcheck:
      # Check that the service is accessible (accepts ping endpoint)
      test: ["CMD-SHELL", "wget -q localhost:2375/_ping -O /dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3

# TODO: Set the default network to driver: none, or maybe use the default network
# as the traefeik proxy? Just make sure to configure it like a normal bridge network
# TODO: Remove internal: true because it's actually only used for overlay networks
networks:
  traefik-proxy:
  # Even though Docker will automatically create a bridge network for us, it's
  # better to create one ourselves
  # https://docs.docker.com/network/bridge/#differences-between-user-defined-bridges-and-the-default-bridge
  mopidy-icecast:
    internal: true
  statping-internal:
    internal: true
  freshrss-internal:
    internal: true
  docker-socket-proxy-internal:
    internal: true

