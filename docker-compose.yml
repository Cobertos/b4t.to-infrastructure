# Everythings hosted off of cobertos.dev

# Please pass in the following variables
# $EMAIL - Email for Traefik

# $ICECAST_PASSWORD - Just sonething strong and random, used by the icecast admin panel and stream connection
# $SPOTIFY_USERNAME
# $SPOTIFY_CLIENT_ID
# $SPOTIFY_CLIENT_SECRET
# $SOUNDCLOUD_TOKEN
# $YOUTUBE_KEY

# $SEAFILE_MYSQL_PASSWORD - Just something strong and random
# $SEAFILE_ADMIN_PASSWORD - Admin account password

version: "3.6"
services:
  # Mopidy + Icecast - My music streaming replacement
  # NOTE: Still super WIP
  # TODO: Fix the latency between playing the song and hearing it on the stream
  # (there seems to be a icecast configuration I can change for this about
  # buffering)
  # TODO: Some of the integrations don't work ;-;
  # TODO: Setup logging and hook up log scanner
  # TODO: Setup healthchecks
  mopidy:
    image: wernight/mopidy:latest
    container_name: mopidy
    volumes:
      - ~/Dropbox/Music/NotOnSpotify:/var/lib/mopidy/media:ro #Local media files
      - /opt/batto-cave/mopidy-data:/var/lib/mopidy/local     #Local configurations
    ports:
      - 6600:6600 #MPD server for ncmpcpp
    #  - 6680:6680 #HTTP server for web client
    command: >-
      mopidy
      -o "audio/output=lamemp3enc ! shout2send async=false mount=mopidy ip=icecast port=8000 password=$ICECAST_PASSWORD"
      -o "spotify/username=$SPOTIFY_USERNAME"
      -o "spotify/password=$SPOTIFY_PASSWORD"
      -o "spotify/client_id=$SPOTIFY_CLIENT_ID"
      -o "spotify/client_secret=$SPOTIFY_CLIENT_SECRET"
      -o "soundcloud/auth_token=$SOUNDCLOUD_TOKEN"
      -o "youtube/youtube_api_key=$YOUTUBE_KEY"
    networks:
      - traefik-proxy
      - mopidy-icecast
    depends_on:
      - icecast
    labels:
      - "traefik.enable=true"
      # Mopidy exposes multiple ports, we just need the dashboard
      - "traefik.http.services.mopidy.loadbalancer.server.port=6680"
      - "traefik.http.routers.mopidy.rule=Host(`mopidy.cobertos.dev`) || Host(`mopidy.b4t.to`)"
  icecast:
    build: 
      context: icecast/
    container_name: icecast
    # ports:
    #  - 8000:8000 #Default icecast
    environment:
      ICECAST_SOURCE_PASSWORD: "$ICECAST_PASSWORD"
      ICECAST_RELAY_PASSWORD: "$ICECAST_PASSWORD"
      ICECAST_ADMIN_PASSWORD: "$ICECAST_PASSWORD"
      ICECAST_ADMIN_USERNAME: admin
    networks:
      - traefik-proxy
      - mopidy-icecast
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.icecast.rule=Host(`icecast.cobertos.dev`) || Host(`icecast.b4t.to`)"

  # Seafile - Dropbox replacement
  # https://download.seafile.com/published/seafile-manual/docker/deploy%20seafile%20with%20docker.md
  # TODO: I should come back to this and use gosu to run this stuff as non-root
  # or use another container that solves this
  # https://github.com/haiwen/seafile-docker/issues/86
  # TODO: Do multiple things need to use this DB?
  # TODO: Get the logs for this as well
  seafile-db:
    image: mariadb:10.1
    container_name: seafile-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "$SEAFILE_MYSQL_PASSWORD"
      MYSQL_LOG_CONSOLE: "true"
    volumes:
      - /opt/batto-cave/seafile-mysql/db:/var/lib/mysql
    networks:
      - seafile-internal

  seafile-memcached:
    image: memcached:1.5.6
    container_name: seafile-memcached
    entrypoint: memcached -m 256
    networks:
      - seafile-internal

  seafile:
    image: seafileltd/seafile-mc:latest
    container_name: seafile
    volumes:
      - /opt/batto-cave/seafile-data:/shared
    ports:
   #   - "80:80"
   #   - "443:443"
      - "8000:8000"
      - "8082:8082"
    environment:
      DB_HOST: seafile-db
      DB_ROOT_PASSWD: "$SEAFILE_MYSQL_PASSWORD"
      TIME_ZONE: America/Detroit
      SEAFILE_ADMIN_EMAIL: cobertosrobertos@gmail.com
      SEAFILE_ADMIN_PASSWORD: "$SEAFILE_ADMIN_PASSWORD"
      SEAFILE_SERVER_LETSENCRYPT: "false"
    depends_on:
      - seafile-db
      - seafile-memcached
    networks:
      - traefik-proxy
      - seafile-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.seafile.loadbalancer.server.port=80"
      - "traefik.http.routers.seafile.rule=Host(`seafile.cobertos.dev`) || Host(`seafile.b4t.to`)"

  # TODO:MAke a separate password
  statping-db:
    image: postgres:10
    container_name: statping-db
    networks:
      - statping-internal
    volumes:
      - /opt/batto-cave/statping-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: $SEAFILE_MYSQL_PASSWORD
      POSTGRES_USER: statping
      POSTGRES_DB: statping

  statping:
    image: statping/statping
    container_name: statping
    volumes:
      - /opt/batto-cave/statping:/app
    depends_on:
      - statping-db
    environment:
      DB_CONN: postgres
      DB_HOST: statping-db
      DB_USER: statping
      DB_PASS: $SEAFILE_MYSQL_PASSWORD
      DB_DATABASE: statping
      NAME: "Batto Ping"
      DESCRIPTION: "Keep an eye on all that important shit"
    networks:
      - traefik-proxy
      - statping-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.statping.rule=Host(`statping.cobertos.dev`) || Host(`statping.b4t.to`)"


  # Networking
  # TODO: Split this into multiple files or something... this is getting bad...
  # TODO: Specify the TLS ciphers explicitly?
  # https://github.com/Holi0317/homeserver-compose/blob/master/traefik/build/config/tls.toml
  traefik:
    image: traefik:v2.2
    container_name: traefik
    command:
      # I could also use a traefik.yml and mount it to 
      #   - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      # but ehhhh, I'll do that if this really becomes unweildy

      # Turn on dashboard, configured to use Basic Auth in this contains labels
      # https://docs.traefik.io/operations/dashboard/#secure-mode
      - "--api.dashboard=true" #Defaults to port 8080

      # - "--log.level=DEBUG"
      #- "--providers.file.directory=/traefik-cfgs"

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # This needs to be the FULL NETWORK NAME. If not, Traefil will sometimes work
      # and sometimes give a bad gateway for containers (randomly every run)
      # https://stackoverflow.com/a/46439598/2759427
      - "--providers.docker.network=batto-cave_traefik-proxy"

      #- "--log.level=DEBUG"

      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"

      #- "--certificatesresolvers.myhttpchallenge.acme.httpchallenge=true"
      #- "--certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=http"
      #- "--certificatesresolvers.myhttpchallenge.acme.email=${EMAIL}"
      #- "--certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json"
    volumes:
      #- ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "8080:8080"
      - "80:80"
    networks:
      - traefik-proxy
    labels:
      - "traefik.enable=true"
      #- "traefik.docker.network=traefik-proxy"
      # Traefik dashboard configuration with HTTP basic auth
      - "traefik.http.routers.api.rule=Host(`traefik.cobertos.dev`) || Host(`traefik.localhost`) || Host(`traefik.b4t.to`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=$TRAEFIK_HTPASSWD"
#TODO: Readd
      # Traefik redirect all http to https
#      - "traefik.http.routers.http_catchall.rule: HostRegexp(`{any:.+}`)"
#      - "traefik.http.routers.http_catchall.entrypoints=http"
#      - "traefik.http.routers.http_catchall.middlewares=https_redirect"
#      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
#      - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
      # Gzip
      #- "traefik.http.middlewares.compress.compress=true"
      # Security - TODO: More research on a couple of these, like stsSeconds
      # https://github.com/Holi0317/homeserver-compose/blob/master/traefik/build/config/middlewares.toml
      #- "traefik.http.middlewares.secure_head.headers.accessControlAllowOrigin=null"
      #- "traefik.http.middlewares.secure_head.headers.sslRedirect=true"
      #- "traefik.http.middlewares.secure_head.headers.contentTypeNosniff=true"
      #- "traefik.http.middlewares.secure_head.headers.browserXssFilter=true"
      #- "traefik.http.middlewares.secure_head.headers.contentSecurityPolicy=upgrade-insecure-requests"
      #- "traefik.http.middlewares.secure_head.headers.stsSeconds=31536000"
      #- "traefik.http.middlewares.secure_head.headers.framedeny=true"
      #- "traefik.http.middlewares.secure_head.headers.customResponseHeaders.Referrer-Policy=no-referrer"
      #- "traefik.http.middlewares.secure_head.headers.customResponseHeaders.X-Powered-By=null"

  namecheap-ddns:
    image: joshuamorris3/namecheap-ddns-update
    container_name: namecheap-ddns
    environment:
      NC_DDNS_PASS: $NAMECHEAP_DDNS_PASSWORD
      DOMAIN: cobertos.dev
      INTERVAL: 10s

networks:
  traefik-proxy:
  # Even though Docker will automatically create a bridge network for us, it's
  # better to create one ourselves
  # https://docs.docker.com/network/bridge/#differences-between-user-defined-bridges-and-the-default-bridge
  mopidy-icecast:
    internal: true
  seafile-internal:
    internal: true
  statping-internal:
    internal: true
